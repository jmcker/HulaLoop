pipeline {
    agent none

    environment {
        HL_WEBHOOK_URL = credentials('HULALOOP_WEBHOOK_URL')
        HL_CODECOV_TOKEN = credentials('HL_CODECOV_TOKEN')
        HL_MEMCHECK_PREFIX = "memcheck"
        HL_ONLY_MASTER = "only_master"
    }

    options {
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    stages {

        stage('Initialization') {

            parallel {

                stage('Configuration') {
                    steps {
                        script {
                            currentBuild.displayName = env.BRANCH_NAME + " - #" + env.BUILD_NUMBER
                        }
                    }
                }

                //************
                //   LINUX
                //************
                stage('Linux') {
                    agent {
                        label 'linux'
                    }
                    environment {
                        HL_OS = "Linux"
                        HL_QT_VERSION = "5.10.1" // Only symbox-server is on 5.10 right now
                        HL_QT_PREFIX = ""

                        PATH = "${HL_QT_PREFIX}/qt/${HL_QT_VERSION}/gcc_64/bin:${PATH}"
                        LD_LIBRARY_PATH = "${HL_QT_PREFIX}/qt/${HL_QT_VERSION}/gcc_64/lib"
                        QT_PLUGIN_PATH = "${HL_QT_PREFIX}/qt/${HL_QT_VERSION}/gcc_64/plugins"
                        QML_IMPORT_PATH = "${HL_QT_PREFIX}/qt/${HL_QT_VERSION}/gcc_64/qml"
                        QML2_IMPORT_PATH = "${HL_QT_PREFIX}/qt/${HL_QT_VERSION}/gcc_64/qml"
                        QT_DEBUG_PLUGINS = 0
                        QT_IMPORT_TRACE = 0
                    }

                    stages {

                        stage('Generate - Linux') {

                            steps {

                                sh '''
                                    echo "CMake generation for ${HL_OS}..."

                                    env
                                    echo "Path: ${PATH}"
                                    qmake -v

                                    rm -rf build-linux
                                    mkdir build-linux
                                    cd build-linux
                                    cmake ..
                                '''

                            }

                        }

                        // Build our application
                        stage('Build - Linux') {

                            steps {


                                sh '''
                                    echo "Building application for ${HL_OS}..."
                                    cmake --build ./build-linux
                                '''

                            }

                        }

                        // Run the test suite
                        stage('Test - Linux') {

                            steps {

                                sh '''
                                    echo "Running test suite on ${HL_OS}..."

                                    lcov -c -i -d build-linux -o build-linux/coverage.base

                                    # These will run on PRs and master and should also be run locally if you think you are leaking.
                                    cd ./build-linux
                                    (export DISPLAY=:0 && ctest -V -E ${HL_ONLY_MASTER})
                                    cd ..

                                    lcov -c -d build-linux -o build-linux/coverage.actual
                                    lcov -a build-linux/coverage.base -a build-linux/coverage.actual -o build-linux/coverage.info
                                '''

                            }

                        }

                        stage('Master Only - Linux') {
                            when {
                                anyOf {
                                    branch 'master'
                                    branch 'develop'
                                    changeRequest target: 'master'
                                    changeRequest target: 'develop'
                                }
                            }

                            steps {

                                sh '''
                                    cd ./build-linux
                                    # (export DISPLAY=:0 && ctest -V -R ${HL_ONLY_MASTER})
                                '''
                            }
                        }

                    } // END stages

                    post {
                        always {
                            sh '''
                                curl https://raw.githubusercontent.com/symboxtra/universal-ci-discord-webhook/master/send.sh > send.sh && chmod +x send.sh
                            '''
                        }
                        success {
                            sh '''
                                ./send.sh success ${HL_WEBHOOK_URL}
                                curl -X PUT -d status=passing http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${HL_OS}-${GIT_BRANCH} || true
                                bash <(curl -s https://codecov.io/bash) -X gcov -f build-linux/coverage.info -F linux -t ${HL_CODECOV_TOKEN}
                            '''
                        }
                        failure {
                            sh '''
                                ./send.sh failure ${HL_WEBHOOK_URL}
                                curl -X PUT -d status=failing http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${HL_OS}-${GIT_BRANCH} || true
                            '''
                        }
                    } // END post

                } // END Linux


                //************
                //    OSX
                //************
                stage ('OSX') {
                    agent {
                        label 'osx'
                    }
                    environment {
                        HL_OS = "OSX"

                        // Jenkins does not load default /etc/paths
                        // Qt bin must be on PATH to link properly
                        PATH = "/usr/local/bin:/usr/local/opt/qt/bin:${PATH}"
                    }

                    stages {

                        stage('Generate - OSX') {

                            steps {

                                sh '''
                                    echo "CMake generation for ${HL_OS}..."

                                    echo "Path: ${PATH}"
                                    qmake -v

                                    rm -rf build-osx
                                    mkdir build-osx
                                    cd build-osx
                                    cmake .. -DHL_INCLUDE_GUI_TESTS=false
                                '''

                            }

                        }

                        stage('Build - OSX') {

                            steps {

                                sh '''
                                    echo "Building application for ${HL_OS}..."
                                    cmake --build ./build-osx
                                '''

                            }

                        }

                        stage('Build Driver - OSX') {

                            steps {

                                sh '''
                                    echo "Building ${HL_OS} HAL driver..."
                                    cd src/audio/OSXDriver
                                    xcodebuild clean build -scheme HulaLoop -configuration Release | xcpretty
                                '''

                            }

                        }

                        stage('Test - OSX') {

                            steps {

                                sh '''
                                    echo "Running test suite on ${HL_OS}..."

                                    lcov -c -i -d build-osx -o build-osx/coverage.base

                                    # Run everything but the memtests
                                    # These will run on PRs and master and should also be run locally if you think you are leaking
                                    cd ./build-osx

                                    ctest -V -E ${HL_ONLY_MASTER}
                                    pkill hulaloop-osx-daemon || true
                                    cd ..

                                    lcov -c -d build-osx -o build-osx/coverage.actual
                                    lcov -a build-osx/coverage.base -a build-osx/coverage.actual -o build-osx/coverage.info

                                    # Strip mismarked function lines
                                    # Ref: https://github.com/linux-test-project/lcov/issues/30#issuecomment-353799085
                                    if [ ! -f ./remove-function-lines.py ]; then
                                        curl https://raw.githubusercontent.com/symboxtra/lcov-llvm-function-mishit-filter/master/remove-function-lines.py > remove-function-lines.py && chmod +x remove-function-lines.py
                                    fi

                                    # Execute script if report was generated
                                    if [ -f build-osx/coverage.info ]; then
                                        python remove-function-lines.py build-osx/coverage.info build-osx/coverage.info
                                        echo "Coverage report cleaned."
                                    fi
                                '''

                            }

                        }

                        stage('Master Only - OSX') {
                            when {
                                anyOf {
                                    branch 'master'
                                    branch 'develop'
                                    changeRequest target: 'master'
                                    changeRequest target: 'develop'
                                }
                            }

                            steps {

                                sh '''
                                    cd ./build-osx

                                    # Start the daemon so that the memcheck tests don't slow down
                                    ./bin/hulaloop-osx-daemon

                                    ctest -V -R ${HL_ONLY_MASTER}
                                    pkill hulaloop-osx-daemon || true
                                '''
                            }
                        }

                    } // END stages

                    post {
                        always {
                            sh '''
                                curl https://raw.githubusercontent.com/symboxtra/universal-ci-discord-webhook/master/send.sh > send.sh && chmod +x send.sh
                            '''
                        }
                        success {
                            sh '''
                                ./send.sh success ${HL_WEBHOOK_URL}
                                curl -X PUT -d status=passing http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${HL_OS}-${GIT_BRANCH} || true
                                bash <(curl -s https://codecov.io/bash) -X gcov -f build-osx/coverage.info -F osx -t ${HL_CODECOV_TOKEN}
                            '''
                        }
                        failure {
                            sh '''
                                ./send.sh failure ${HL_WEBHOOK_URL}
                                curl -X PUT -d status=failing http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${HL_OS}-${GIT_BRANCH} || true
                            '''
                        }
                    } // END post

                } // END OSX


                //************
                //  WINDOWS
                //************
                stage ('Windows') {
                    agent {
                        label 'windows'
                    }
                    environment {
                        HL_OS = "Windows"
                        HL_QT_VERSION = "5.11.2"
                        HL_QT_PREFIX = "D:\\Qt\\${HL_QT_VERSION}"
                        PATH = "C:\\Program Files\\OpenCppCoverage;${PATH}"
                    }

                    stages {

                        stage('Generate - Windows') {

                            steps {

                                powershell '''
                                    echo "CMake generation for ${ENV:HL_OS}..."

                                    # Not on path
                                    # qmake -v

                                    Remove-Item -Recurse -Force -ErrorAction Ignore build-win
                                    mkdir build-win
                                    cd build-win
                                    cmake .. -DQT_ROOT="${ENV:HL_QT_PREFIX}" -A x64
                                '''

                            }

                        }

                        stage('Build - Windows') {

                            steps {

                                powershell '''
                                    echo "Building application for ${ENV:HL_OS}..."
                                    cmake --build ./build-win -- /verbosity:minimal
                                '''

                            }

                        }

                        stage('Test - Windows') {

                            steps {

                                powershell '''
                                    echo "Running test suite on ${ENV:HL_OS}..."

                                    # cd build-win
                                    # ctest -C Debug -V -E ${ENV:HL_ONLY_MASTER}
                                    # if ($LastExitCode -ne 0) {$host.SetShouldExit($LastExitCode)} # Exit with test error code

                                    # cd ..

                                    ./win-coverage.ps1 build-win -E ${ENV:HL_ONLY_MASTER}
                                '''

                            }

                        }

                        stage('Master Only - Windows') {
                            when {
                                anyOf {
                                    branch 'master'
                                    branch 'develop'
                                    changeRequest target: 'master'
                                    changeRequest target: 'develop'
                                }
                            }

                            steps {

                                powershell '''
                                    cd ./build-win
                                    ./win-coverage.ps1 build-win -R ${ENV:HL_ONLY_MASTER}
                                '''
                            }
                        }
                    } // END stages

                    post {
                        always {
                            powershell '''
                                Invoke-RestMethod https://raw.githubusercontent.com/symboxtra/universal-ci-discord-webhook/master/send.ps1 -o send.ps1
                            '''
                        }
                        success {
                            powershell '''
                                ./send.ps1 success ${ENV:HL_WEBHOOK_URL} -ErrorAction Ignore
                                Invoke-WebRequest -Uri http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${ENV:HL_OS}-${ENV:GIT_BRANCH} -Method PUT -Body (@{"status"="passing"} | ConvertTo-Json) -ContentType "application/json"
                                codecov --root . --disable gcov -f build-win/cobertura.xml -F windows -t ${ENV:HL_CODECOV_TOKEN}
                            '''
                        }
                        failure {
                            powershell '''
                                ./send.ps1 failure ${ENV:HL_WEBHOOK_URL} -ErrorAction Ignore
                                Invoke-WebRequest -Uri http://pi.symboxtra.dynu.net/status/builds/HulaLoop-${ENV:HL_OS}-${ENV:GIT_BRANCH} -Method PUT -Body (@{"status"="failing"} | ConvertTo-Json) -ContentType "application/json"
                            '''
                        }
                    } // END post

                } // END Windows

                stage ('Documentation') {
                    agent {
                        label 'linux'
                    }
                    environment {
                        HL_OS = "Linux"
                        // 25 + 40: To ignore the HulaAudioError macros that are uncommented
                        HL_DOX_UNDOCUMENTED_LIMIT = 65
                    }

                    steps {
                        sh '''
                            # Turn off echoing all commands
                            set +x

                            echo -e "Building Doxygen"
                            echo

                            cd docs
                            DOX_UNDOCUMENTED="$(doxygen 2>&1 | grep 'not documented')"
                            DOX_ERR_COUNT=$(echo "${DOX_UNDOCUMENTED}" | wc -l)

                            echo -e "Doxygen completed with ${DOX_ERR_COUNT} undocumented member(s)"
                            echo "${DOX_UNDOCUMENTED}"

                            # Exit with error if Doxygen had too many undocumented members
                            if [ "${DOX_ERR_COUNT}" -gt "${HL_DOX_UNDOCUMENTED_LIMIT}" ]; then
                                exit 1
                            fi
                        '''
                    }

                } // END documentation

            } // END parallel

        } // END configuration

    } // END stages

} // END pipeline

